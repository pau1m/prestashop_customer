<?php

//@todo add try / catch and error handling for requests
//@todo actionBeforeAuthentication <-- helpful hook
//@todo tidy up included files
//@todo add feature for additional profile fields 
//@todo add error handling and checking 
//@todo put config values in drupal variables
//@todo create module config page on presta site
//@todo set up debug and drupal watchdog
//@todo refactor
//@todo add validation and to prestashop config page and trim values
//@todo add documentaton to the config page on where to find these values within prestashop
//@todo prestaside force default config values and / or do some kind of checking on the presta side
//@todo handle cookies differenly for admin on the prestaside

// define('_COOKIE_KEY_', 'cnVHEPeCHmZ4EiZE6mhgaNKVfmD8LYgE2FL8tHErKBgRzciZPprGa3GP');
// define('_COOKIE_IV_', 'sqmYZJCL');
// define('_RIJNDAEL_KEY_', 'dutwichtd2IAk1JZeTc8HxuiAqatzQ2k');
// define('_RIJNDAEL_IV_', 'iTtZq4XiI9xOfJXb6WlT+g==');
// define('_PS_VERSION_', '1.6.0.9'); //is there any way to interrogate that over the API
// define('PS_CIPHER_ALGORITHM', 1);  //use mcrypt lib and not blowfisj

// add ps lang default check PS_LANG_DEFAULT

/**
 * Implements hook_init().
 */
function prestashop_customer_init() {

  require_once 'PSWebServiceLibrary.php';
}

function prestashop_customer_menu() {

  $items['admin/config/system/prestashop'] = array(
    'title' => 'Prestashop Config',
    'description' => '@todo description',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('prestashop_customer_config_form'),
    'access arguments' => array('Administer site configuration'), //TRUE, //@todo add perm access arguments 
    'type' => MENU_NORMAL_ITEM,
  );

  //presta-shop passes a url to redirect to
  $items['presta-redirect/%'] = array(
    'title' => '',
    'page callback' => 'prestashop_customer_redirection',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/*
 *  Config settings
 */
function prestashop_customer_config_form($form, &$form_state) {

  $form['prestashop_key'] = array (
    '#type' => 'textfield',
    '#title' => t('Prestashop API Key'),
    '#maxlength' => 127,
    '#default_value' =>  variable_get('prestashop_key', ''),
    '#description' => 'Generate the API key (and set its permissions) at PrestaShop->Admin->Advanced Parameters->Webservice' ,
  );

  $form['prestashop_url'] = array (
    '#type' => 'textfield',
    '#title' => t('Prestashop URL'),
    '#maxlength' => 127,
    '#default_value' => variable_get('prestashop_url', ''),
    '#description' => 'Enter URL of the shop in the form "http://example.com/" (include the trailing slash)',
  );

  $form['prestashop_cookie_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Prestashop Cookie Key',
    '#maxlength' => 127,
    '#default_value' => variable_get('prestashop_cookie_key', ''),
    '#description' => 'Check values in file located at PrestaShop/config/settings.inc.php',
  );

  $form['prestashop_cookie_iv'] = array(
    '#type' => 'textfield',
    '#title' => 'Prestashop Cookie IV',
    '#maxlength' => 127,
    '#default_value' => variable_get('prestashop_cookie_iv', ''),
    '#description' => 'Check values in file located at PrestaShop/config/settings.inc.php',
  );

  $form['prestashop_rijndael_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Prestashop Rijdael Encryption Key',
    '#maxlength' => 127,
    '#default_value' => variable_get('prestashop_rijndael_key', ''),
    '#description' => 'Check values in file located at PrestaShop/config/settings.inc.php',
  );

  $form['prestashop_rijndael_iv'] = array(
    '#type' => 'textfield',
    '#title' => 'Prestashop Rijndael Encryption IV',
    '#maxlength' => 127,
    '#default_value' => variable_get('prestashop_rijndael_iv', ''),
    '#description' => 'Check values in file located at PrestaShop/config/settings.inc.php',
  );

  $form['prestashop_version'] = array(
    '#type' => 'textfield',
    '#title' => 'Prestashop version number',
    '#maxlength' => 127,
    '#default_value' => variable_get('prestashop_version', ''),
    '#description' => 'Check values in file located at PrestaShop/config/settings.inc.php',
  );

  $form['prestashop_debug_mode'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Enable Debug mode'),
    '#description' => t('@todo'),
  );

  return system_settings_form($form);
}

function prestashop_customer_write_customer_cookie() {

 include_once('Cookie.php');

 $customer = prestashop_customer_fetch_current_customer();

 if (!is_null($customer)){

   $cookie = new CookieCore('ps-s'.TRUE);

   $cookie->__set('passwd', (string)$customer->passwd);
   $cookie->__set('email', 'paul@paulmiller.it');
   $cookie->__set('logged', 1);
   $cookie->__set('id_guest', '');
   $cookie->__set('id_customer', 4);
   $cookie->__set('customer_lastname', (string)$customer->lastname);
   $cookie->__set('customer_firstname', (string)$customer->firstname);

}

}
//@todo 

/*
 * Get Prestashop UID of the current user via XML request
 * 
 * @return Obj
 *   Prestashop user object
 */
function prestashop_customer_fetch_current_customer() {

  global $user;

  //exit if user is anonymous
  if (!$user->uid > 0){
    return null;
  }

  $url = variable_get('prestashop_url', '');
  $key = variable_get('prestashop_key', '');

  //@todo isset!
  $webService = new PrestaShopWebservice($url, $key, true);

  try {
    $xml = $webService->get(array('url' => $url . '/api/customers?filter[email]=' . $user->mail));
  } catch ( PrestaShopWebserviceException $ex ) {
    //log and fail silently
    watchdog('prestashop_customer', 'Unable to fetch data for %mail. Exception: %ex', 
              array('%mail' => $user->mail, '%ex' => $ex)); 
    return NULL;
  } 


  $presta_uid = (string) $xml->customers->children()->attributes();
  //make sure we have an ID
  if (!empty($presta_uid) && is_numeric($presta_uid)) {

    try {

      $xml = $webService->get(array('url' => $url . '/api/customers/' . $presta_uid)); 
    } catch ( PrestaShopWebserviceException $ex ) {


          watchdog('prestashop_customer', 'Unable to fetch data for presta user %presta_uid. Exception: %ex', 
              array('%presta_uid' => $presta_uid, '%ex' => $ex)); 
          return NULL;
    }

    return $xml->customer->children();
  }



 // $customer = $xml->customer->children();

  //$pass = (string)$resources->passwd;
  //return $customer;

}



function prestashop_customer_redirection($path){

  $shop_domain = variable_get('prestashop_url', '');
  // dpm($shop_domain);
  // dpm($path);
  drupal_goto($shop_domain . $path);
}






/*
 * Implements hook_user_login
 */
function prestashop_customer_user_login(&$edit, $account) {

  prestashop_customer_write_customer_cookie();

}


/*
 * Implements hook_user_logout()
 */
function prestashop_customer_user_logout($account) {

  watchdog('presta_module', 'user %mail logged out', array('%mail' => $account->mail));

  foreach($_COOKIE as $key => $value) {
    if (preg_match('/PrestaShop/', $key)) {

      unset($_COOKIE[$key]);
      setcookie($key, "foo", time()-3600, '/', '.llrsso.dev', false, true);
      drupal_static('drupal_http_headers', array());
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 * @param $form
 * @param $form_state
 */
function prestashop_customer_form_user_register_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'prestashop_customer_user_register_submit';
}

function prestashop_customer_user_register_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  $user = array(
    'pass' => $values['pass'],
    'mail' => $values['mail'],
    'field_first_name' => $values['field_first_name'][LANGUAGE_NONE][0]['value'],
    'field_last_name' => $values['field_last_name'][LANGUAGE_NONE][0]['value'],
  );
  prestashop_create_user($user);
}

/**
 * Custom function to create a user in Prestashop.
 */
function prestashop_create_user($user) {
  $url = variable_get('prestashop_url', '');
  $key = variable_get('prestashop_key', '');

  $webService = new PrestaShopWebservice($url, $key, true);
  $xml = $webService -> get(array('url' => $url . '/api/customers?schema=blank'));

  $resources = $xml->children()->children();

  unset($resources->id);
  $resources->id_default_group = 3;
  unset($resources->id_lang);
  unset($resources->newsletter_date_add);
  unset($resources->ip_registration_newsletter);
  unset($resources->last_passwd_gen);
  unset($resources->secure_key);
  unset($resources->deleted);
  $resources->passwd = $user['pass'];
  $resources->lastname = $user['field_last_name'];
  $resources->firstname = $user['field_first_name'];
  $resources->email = $user['mail'];
  unset($resources->id_gender);
  unset($resources->birthday);
  unset($resources->newsletter);
  unset($resources->optin);
  unset($resources->website);
  unset($resources->company);
  unset($resources->siret);
  unset($resources->ape);
  unset($resources->outstanding_allow_amount);
  unset($resources->show_public_prices);
  unset($resources->id_risk);
  unset($resources->max_payment_days);
  $resources->active = 1;
  unset($resources->note);
  unset($resources->is_guest);
  unset($resources->id_shop);
  unset($resources->id_shop_group);
  unset($resources->date_add);
  unset($resources->date_upd);
  unset($resources->associations);

  $opt = array('resource' => 'customers');

  $opt['postXml'] = $xml->asXML();

  $xml = $webService->add($opt);

  //@todo need some kind of confirmation
}


// function prestashop_get_user($edit, $account) {
//   $url = variable_get('prestashop_url', '');
//   $key = variable_get('prestashop_key', '');

//   $webService = new PrestaShopWebservice($url, $key, true);
//   $xml = $webService -> get(array('url' => $url . '/api/customers?filter[email]=' . $account->mail));

//   $resources = $xml->children()->children();
// }


/*
function prestashop_customer_create_presta_login($email = 'paul@paulmiller.it') {

  $url = variable_get('prestashop_url', '');
  $key = variable_get('prestashop_key', '');

  $webService = new PrestaShopWebservice($url, $key, true);
  $xml = $webService->get(array('url' => $url . 'api/customer_login?email=' . $email));

  $cookie_name = trim((string)$xml->cookie->name);
  $cookie_value = trim((string)$xml->cookie->value);

  //cookie_value has already been URL encoded
  return setrawcookie ( $cookie_name,  $cookie_value, time() + 1728000, '/', '.llrsso.dev', FALSE, TRUE);

}
*/